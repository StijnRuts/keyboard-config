#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,physical-layout = &foostan_corne_5col_layout;
  };
};


#define DEFAULT   0
#define S_DEFAULT 1
#define SYMBOLS   2
#define S_SYMBOLS 3
#define NUM_NAV   4


#define  ___  &trans
#define  _x_  &none

#define  HYPER  LC(LA(LS(LGUI)))


// DEFAULT

#define  RAISE  &mo SYMBOLS
#define  LOWER  &mo NUM_NAV

#define  __a  &kp Q
#define  __z  &kp W
#define  __e  &kp E
#define  __r  &kp R
#define  __t  &kp T
#define  __y  &kp Y
#define  __u  &kp U
#define  __i  &kp I
#define  __o  &kp O
#define  __p  &kp P

#define  __H_q  &mt HYPER  A
#define  __A_s  &mt LALT   S
#define  __C_d  &mt LCTRL  D
#define  __S_f  &lt S_DEFAULT F
#define  __M_g  &mt LGUI   G
#define  __M_h  &mt LGUI   H
#define  __S_j  &lt S_DEFAULT J
#define  __C_k  &mt LCTRL  K
#define  __A_l  &mt LALT   L
#define  __H_m  &mt HYPER  SEMI

#define  __w    &kp Z
#define  __x    &kp X
#define  __c    &kp C
#define  __v    &kp V
#define  __b    &kp B
#define  __n    &kp N
#define  __com  &kp M          // ,
#define  __dot  &kp LS(COMMA)  // .
#define  __que  &kp LS(M)      // ?
#define  __squ  &kp N4         // '

#define  __ESC  &kp ESC
#define  __RET  &kp RET
#define  __SPC  &kp SPACE
#define  __BSP  &kp BSPC


// SHIFTED DEFAULT

#define  __A  &kp LS(Q)
#define  __Z  &kp LS(W)
#define  __E  &kp LS(E)
#define  __R  &kp LS(R)
#define  __T  &kp LS(T)
#define  __Y  &kp LS(Y)
#define  __U  &kp LS(U)
#define  __I  &kp LS(I)
#define  __O  &kp LS(O)
#define  __P  &kp LS(P)

#define  __H_Q  &mt HYPER  LS(A)
#define  __A_S  &mt LALT   LS(S)
#define  __C_D  &mt LCTRL  LS(D)
#define  __S_F  &mt LSHIFT LS(F)
#define  __M_G  &mt LGUI   LS(G)
#define  __M_H  &mt LGUI   LS(H)
#define  __S_J  &mt LSHIFT LS(J)
#define  __C_K  &mt LCTRL  LS(K)
#define  __A_L  &mt LALT   LS(L)
#define  __H_M  &mt HYPER  LS(SEMI)

#define  __W    &kp LS(Z)
#define  __X    &kp LS(X)
#define  __C    &kp LS(C)
#define  __V    &kp LS(V)
#define  __B    &kp LS(B)
#define  __N    &kp LS(N)
#define  __sco  &kp COMMA  // ;
#define  __col  &kp DOT    // :
#define  __exc  &kp N8     // !
#define  __dqu  &kp N3     // "

#define  __TAB  &kp TAB
#define  __DEL  &kp DEL


// SYMBOLS

// &_til macro                // ~
#define __bar  &kp RA(N1)     // |
#define __und  &kp LS(EQUAL)  // _
#define __dol  &kp LBKT       // $
#define __amp  &kp N1         // &
#define __pro  &kp LS(SQT)    // %
#define __eur  &kp RA(E)      // €
#define __has  &kp RA(N3)     // #
#define __at   &kp RA(N2)     // @
#define __deg  &kp LS(MINUS)  // °

#define __fsl  &mt HYPER  LS(DOT)               // /
#define __lt   &mt LALT   NON_US_BACKSLASH      // <
#define __lbr  &mt LCTRL  RA(LBKT)              // [
#define __lpa  &lt S_SYMBOLS N5                 // (
#define __lac  &mt LGUI   RA(N9)                // {
#define __rac  &mt LGUI   RA(N0)                // }
#define __rpa  &lt S_SYMBOLS MINUS              // )
#define __rbr  &mt LCTRL  RA(RBKT)              // ]
#define __gt   &mt LALT   LS(NON_US_BACKSLASH)  // >
#define __bsl  &mt HYPER  RA(NON_US_BACKSLASH)  // \

#define __aigu  &kp RA(SQT)   // é
#define __cce   &kp N9        // ç
#define __trm   &kp LS(LBKT)  // ë
#define __car   &kp LBKT      // ^
#define __grav  &kp RA(BSLH)  // è


// SHIFTED SYMBOLS

// &_grav3 macro  // ```


// NUMBERS & NAVIGATION

#define  __1  &kp LS(N1)
#define  __2  &kp LS(N2)
#define  __3  &kp LS(N3)
#define  __4  &kp LS(N4)
#define  __5  &kp LS(N5)
#define  __6  &kp LS(N6)
#define  __7  &kp LS(N7)
#define  __8  &kp LS(N8)
#define  __9  &kp LS(N9)
#define  __0  &kp LS(N0)

#define  H_div  &mt HYPER  KP_DIVIDE
#define  A_mul  &mt LALT   KP_MULTIPLY
#define  C_min  &mt LCTRL  KP_MINUS
#define  S_plu  &mt LSHIFT KP_PLUS
#define  M_equ  &mt LGUI   KP_EQUAL
#define  M_Le   &mt LGUI   LEFT
#define  S_Dn   &mt LSHIFT DOWN
#define  C_Up   &mt LCTRL  UP
#define  A_Rg   &mt LALT   RIGHT
#define  H_bsl  &mt HYPER  RA(NON_US_BACKSLASH)

#define  __HOME   &kp HOME
#define  __PG_DN  &kp PG_DN
#define  __PG_UP  &kp PG_UP
#define  __END    &kp END

/ {
  macros {
    _til: _til {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp RA(SLASH) &kp SPACE>;
    };
    _grav3: _grav3 {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp RA(BSLH) &kp SPACE>
        , <&macro_tap &kp RA(BSLH) &kp SPACE>
        , <&macro_tap &kp RA(BSLH) &kp SPACE>
        ;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
// ╭─────────┬─────────┬─────────┬─────────┬─────────╮   ╭─────────┬─────────┬─────────┬─────────┬─────────╮
       __a       __z       __e       __r       __t           __y       __u       __i       __o       __p
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
     __H_q     __A_s     __C_d     __S_f     __M_g         __M_h     __S_j     __C_k     __A_l     __H_m
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
       __w       __x       __c       __v       __b           __n      __com     __dot     __que     __squ
// ╰─────────┴─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┴─────────╯
                          __ESC     __RET     LOWER         RAISE     __SPC     __BSP
//                     ╰─────────┴─────────┴─────────╯   ╰─────────┴─────────┴─────────╯
      >;
    };

    shifted_default_layer {
      bindings = <
// ╭─────────┬─────────┬─────────┬─────────┬─────────╮   ╭─────────┬─────────┬─────────┬─────────┬─────────╮
       __A       __Z       __E       __R       __T           __Y       __U       __I       __O       __P
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
      __H_Q     __A_S     __C_D     __S_F     __M_G         __M_H     __S_J     __C_K     __A_L     __H_M
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
       __W       __X       __C       __V       __B           __N      __sco     __col     __exc     __dqu
// ╰─────────┴─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┴─────────╯
                           ___       ___       ___           ___      __TAB     __DEL
//                     ╰─────────┴─────────┴─────────╯   ╰─────────┴─────────┴─────────╯
      >;
    };

    symbol_layer {
      bindings = <
// ╭─────────┬─────────┬─────────┬─────────┬─────────╮   ╭─────────┬─────────┬─────────┬─────────┬─────────╮
      &_til     __bar     __und     __dol     __amp         __pro     __eur     __has     __at      __deg
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
      __fsl     __lt      __lbr     __lpa     __lac         __rac     __rpa     __rbr     __gt      __bsl
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
     __aigu     __cce     __trm     __car      _x_           _x_      __com     __dot     __que     __grav
// ╰─────────┴─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┴─────────╯
                           ___       ___       ___           ___       ___       ___
//                     ╰─────────┴─────────┴─────────╯   ╰─────────┴─────────┴─────────╯
      >;
    };

    shifted_symbol_layer {
      bindings = <
// ╭─────────┬─────────┬─────────┬─────────┬─────────╮   ╭─────────┬─────────┬─────────┬─────────┬─────────╮
       _x_       _x_       _x_       _x_       _x_           _x_       _x_       _x_       _x_       _x_
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
       _x_       _x_       _x_       _x_       _x_           _x_       _x_       _x_       _x_       _x_
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
       _x_       _x_       _x_       _x_       _x_           _x_     __sco     __col     __exc     &_grav3
// ╰─────────┴─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┴─────────╯
                           ___       ___       ___           ___       ___       ___
//                     ╰─────────┴─────────┴─────────╯   ╰─────────┴─────────┴─────────╯
      >;
    };

    num_nav_layer {
      bindings = <
// ╭─────────┬─────────┬─────────┬─────────┬─────────╮   ╭─────────┬─────────┬─────────┬─────────┬─────────╮
       __1       __2       __3       __4       __5           __6       __7       __8       __9       __0
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
      H_div     A_mul     C_min     S_plu     M_equ          M_Le      S_Dn      C_Up      A_Rg     H_bsl
// ├─────────┼─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┼─────────┤
      __pro     __lt      __und     __gt       _x_         __HOME    __PG_DN   __PG_UP    __END      _x_
// ╰─────────┴─────────┼─────────┼─────────┼─────────┤   ├─────────┼─────────┼─────────┼─────────┴─────────╯
                           ___       ___       ___           ___       ___       ___
//                     ╰─────────┴─────────┴─────────╯   ╰─────────┴─────────┴─────────╯
      >;
    };
  };
};

// TODO:
// Cut, Copy, Paste, Undo, Redo
// Media and volume control
// Screen brightness control
// Underglow RGB control
// BTLE control
// Function keys
// Printscreen
